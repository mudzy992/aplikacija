Otvoriti folder u VS-u

npm init 

i pratiti wizard
https://youtu.be/Jw4Gz066xAs - kako se povezuje sa bazom

Kako započeti novi branch na git, tj. kada radimo kao u nekom timu kako da krenemo svoj zadatak
U donjem lijevo uglu VS (u samom uglu ima u kojemo smo brench), kada kliknemo na to pratimo korake 
Ili u terminalu preko komandi:
- git branch naziv brencha
- git branch -l (izlist svih branch)
- git checkout naziv tog branch


Prvo što treba da uradimo ako hoćemo da koristimo bazu podataka u našem projektu jeste da uradimo 
instalaciju modula u naš projekat (mysql)

- npm i mysql

nakon toga ćemo koristiti biblioteku TypeORM
TypeORM nam omogućava da napravimo rad sa mysql bazom podataka bez potrebe da pišemo neke konkretne SQL upite.

- npm i typeorm 

nakon instalacije typeorm moramo da omogućimo integraciju sql i typeorm sa tim našim nestjs

- npm i @nestjs/typeorm 

to nam omogućava da u našem trenutno nestjs projekat integrišemo typeorm

sve ove instalacije možemo da radimo separativno jedno po jednu
a možemo i sve zajedno pomoću komande

- npm i mysql typeorm @nestjs/typeorm

Nakon instalacija idemo u integraciju svih modela u naš projekat, spremni za upotrebu komponenti

Integracija/mogućnost korištenja MYSQL u aplikaciji

1. Pravljenje konfiguracijski parametara za bazu (napraviti config folder)
 - prvi fajl u tom folderu koji ćemo napraviti tj. koji će raditi konekciju na našu bazu podataka zvat će se DatabaseConfiguration.ts
 (on će iz sebe exportovati jednu konstantu koja predstavljati objekat i taj objekat će imati u sebi popis parametara za vezu baze podataka)
 - nakon što smo kreirali config file sa podacima baze podataka radimo povezivanje aplikacije
  to radimo u našem glavnom modulu app.module.ts
  glavni modul treba da izvrši povezivanje sa mysql pomoću import komponente
   (import navodi spisak svih modula koji naš nestjs posjeduje)
- s obzirom da koristim typeorm modul, potrebno je i njega importovati 
- sve dodajemo u app.module.ts u niz imports: [TypeOrmModule.forRoot({})] (pošto on nije imporovan import { TypeOrmModule } from '@nestjs/typeorm';)
- TypeOrmModule.froRoot{} objekat zahtjeva parametre konekcije (dodatne parametre)
  prvo moramo reći koji je tip baze (mysql, mariadb, mssql, post)
  podaci za povezivanje (host) - sve to imamo u database.configuration.ts
- Da bismo učinili podatke iz database.configuration.ts vidljivim i korisnim u app.module.ts moramo uraditi sljedeće
  importovati tu našu konstantu (koja se zove DatabaseConfiguration) 
  kada to uradimo možemo da koristimo podatke na način
  DatabaseConfiguration.hostname (to će biti kao da smo ukucali podataka iz database.configuration.ts pod hostname (localhost))
  i dodati entitete entities: []
TypeORm treba da nam omogući rad sa entitetima, tako da moramo u bazi podataka kreiati za svaku tabelu entitet

Da bismo napravili entitete moramo uraditi sljedeće:
- prvo osmisliti neki folder u kojemo ćemo držati sve te entitete 
  entiteti su klase (moduli koji exportuju klase) koje sadrže neke dopunske informacije
  o tome kako se ta klasa povezuje sa strukturom baze podataka
  nakon napravljenog entiteta (folder, klasa i dodat u entities app.module.ts)
  Taj entitet mora biti nabrojan kao jedan od dostupnih TypeORM modula sa kojima radi aplikacija
  oni se navode ispod TypeOrmModule.forRoot({}), 
  TypeOrmModule.forFeature([prosljeđujemo spisak svih entiteta za koji automacki treba da narpavi repozitorijum])
  i time je zavšeno kreiranje entiteta

Napraviti komponentu koja će imati komunikaciju sa bazom podataka (to ne može da bude app.controllor.ts)
nestjs nam omogućava da automacki generiše servis (baciti ih sve u folder)
 - nest generate service administrator services
kada se generiše servis potrebno je entitet pridružit tom servisu
to radimo kroz konstruktor u tom servisu
 - constructor(navesti uvoz svih repozitorijuma i datim im neko ime) private readonly ime: tip{}

Nakon kreiranja konstruktora kreiramo funkcije getAl, get, update, insert, delete...

Da bi ga prikazali u kontoleru potrebno je dodati rutu 
npr. @Get('api/administrator')

Da bismo izbjegli kreiranje entiteta i servisa ručno za svaku relaciju u bazi podataka
možemo da koristimo poseban alat (model), on se instalira na sljedeći način

npm i typeorm-model-generator

Nakon što uradimo izmjene eventualne, i sve što je bitno vezano za automacki generisane entitete
sljedeće što moramo da uradimo jeste da ih registrujemo u app.module.ts

------------------------------------
Da bismo mogli u bazu da dodamo neki zapis, mi moramo da imamo da imamo neki mehanizam da to dopremimo od korisnika.
HTTP protokol nam to omogućava (POST ili PUT metodom)
Da bismo po pravili mogli da primimo te podatke, oni moraju imati tačno definisan format. za to koristimo Data Transfer Object
DTO je klasa koja sadrzi popis svih polja, i obavezno njihivoih tipova
koja su očekivana, i dodatno mogu biti pojašnjenja anotacijama za potrebe validacije,
i predstavljaju oblik podataka koje aplikacija očekuje da prihvati od klijenta,
a koje mogu da upotrebe metode kontrolera ili metoda servisa.
Struktura DTO i baze podataka NIJE ili NE TREBA da bude ista.

DTO se definiše kao obična klasa, koja u sebi ima spisak određenih polja i svih određenih vrijednosti za pojedinačna polja, 
po potrebi ce sadržati specijalne anotacije koje se koriste za validaciju podataka koji stižu od klijenta kao sastavni dio DTO.

Nakon što kreiramo Dto, trebamo da napravimo kako da prihvatimo te podatke od klijenta.
To radimo kroz app.controllor.ts, ali da ne bi preopteretili taj glavni kontroler,
idealno bi bilo da za svaki segment pravimo kontroler


------------ CRUD -----------
Da bi automatizovali ovaj sistem, potrebno je instalirati tri nova npm paketa
-- na ubuntu sam morao sve da instaliram globalno -g
-  npm i @nestjsx/crud @nestjsx/crud-typeorm @nestjsx/crud-request

Kreiranje seta crud aplikacija
Da bismo imali nekakav mehanizam upravljanja entitetima treba nam servis (administrator.servis.ts)
(sve je to bilo ručno napravljeno)

-- Sljedeći korak jeste da napravimo folder i file za servis (template jednog servisa ima)
-- Nakon kreiranja servisa izmjene u glavnom app modelu
-- Sljedeće što moramo da napravimo jeste kontroler (njega ćemo praviti u folderu controllers/api)
-- Nakon kreiranja controlera (ima template) treba ga navesti isto u glavnom modelu, kao i novi servis
-- Kreiranje rute (u api folderu), te dodavanje relacija (join) prateći entitet te rute

--------------- OBRADA SLOŽENOG SERVISA I OBRADA DTO -----------
-- Napraviti DTO file, koji će biti zahtjevan poljima koji su potrebni za dodavanje u bazu
-- Detaljno objašnjenje u article.service.ts

---------------------------- TOKENI -----------------------------
-- Prvo treba definisa šta uopće znači raditi sa autentifikacijom korisnika
-- šta je uopće sesija/token (na koji način se čuvaju, kako se upotrevljavaju)
-- Midleware (presretač)
-- Middleware se mora registrovati u konfiguraciji našeg modula (app.module)
-- Da bismo mogli da registrujemo middleware moramo da znamo šta on ustvari radit
   naš middleware treba da presretne request, treba da pronađe u tom requestu neki određeni
   header, i u tom headeru treba da pronađe neku vrijednost
// Posjetilac je neko ko ima pravo da izvrši neke rute (neki metod/e u nekom kontroleru)
// bez potrebe da ima aktivnu sesiju (da nije autorizovan)
// u tom slučaju najbolje je da se napravi poseban kontroler
-- GENERISANJE TONEKA U auth.controller.ts

----- MIDDLEWARES --------------------------------
-- Kao i sve prethodno, i za middleware pravimo novi folder gdje ćemo ih smještation
-- Prvi middleware koji ćemo napraviti je za autentifikaciju
    U tom middleware ćemo napraviti jednu klasu koja će implementirati
    određeni interfejs koji imaju svi mogući nestJS middlewari
    NestMiddleware (svi middlewari koje budemo pravili, moraju implementirati ga)
    Implementirati NestModule u app.module.ts i konfigurisati rute gdje će se primjenjivati i gdje ne

----- UPLOAD MEHANIZAM ---------------------------
-- Upload datoteke je proces slanja sadržaja jedne ili više datoteka od klijenta ka serveru u okviru HTTP zahtjeva
-- Postoji veliki broj tehnika za pripremu HTTP zahtjeva sa sadržajem datoteka
-- Najćešće, sadržaj datoteke se salje u zahtjevu HTTP POST metodom tako da bude kodiran,
   najčešće kao Base64 kodirani tekst, u tijelu zahtjeva koji se upućuje serveru. Tom prilikom
   se definiše u zaglavlju zahtjeva dodatno polje koje ukazuje na tip sadržaja u tijelu HTTP zahtjeva,
   a to je enctype sa vrijednošću "multipart/form-data" 
-- Na strani servera, podaci se čitaju iz tijela zahtjeva, razdvajaju se kodirani sadržaji jedne
   ili više datoteka, dekodiraju se, analiziraju i premještaju na određenu lokaciju trajnog 
   skladištenja na memorijskom prostoru servera.

   - Prvo što trebamo uraditi jeste da pogledamo u bazi podataka šta treba da imamo o našem fajlu
     U našem slučaju, to je samo image path podatak koji trebamo sačuvati u bazi
   - Sljedeći korak jeste da oderdimo gdje ćemo sačuvati naše fajlove
     Potrebno je napraviti neku lokaciju kojoj će moći pristupiti i backend i frontend dio aplikacije
     (neki izdvojeni storage)
   - Kreirati cofig file u kojem ćemo upisati putanju za storage
     (iz jednog prostog razloga, nekada se može desiti da će se storage lokacija zamjeniti
     i da ne bi mjenjali linkove na svim fajlovima, samo tu izmjeniti podatak o lokaciji (main lokaciji))
     Putanja koju upisujemo u taj fajl je relativno na naš projekat

     instalacija multera

     npm i @types/express -D (-D samo uzutra developmenta)

     npm i file-type (da bi isčitavali početne bajtove fajlova)
     korišteno u dijelu upload-mehanizma za filter mimetype
     Posljednja verzija koja ne izbacuje grešku kod file-type je 16.5.3
     tako da instalacija ide ovako
     npm i file-type@16.5.3

     ------ RESIZE SLIKA BIBLIOTEKA -------
     Da bi kreirali thumbs ili smanjili slike (veličine), potrebno je instalirati
     sljedeću biblioteku 

     npm i sharp

     pomoću ove biblioteke moguće je resize, rotate, promjena boja.. sve vezano za slike

     ------ VALIDACIJA PODATAKA -------
     Za validaciju podataka potrebno je instalirati neki od validatora

     npm i class-validator

     nakon toga definisati ga u main.ts
     definišemo ga u main.ts globalno, jer ne želimo (a možemo) nad svakim metodom implemetiramo koji pipe da koristi

     ------ EMAIL ----------
     Da bismo omogućili slanje emaila potrebno je da instaliramo komponentu koja će nam omogućiti slanje mailova

     npm i @nestjs-modules/mailer nodemailer

     nakon toga ju je potrebno uključiti u aplikaciju, tj. u našem glavnom app.module,
     te u dijelu gdje smo uključili ostale module (TypeOrmModule npr.) dodajemo i mailer
